generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model activities {
  activityid    Int       @id
  name          String?   @db.VarChar(255)
  date          DateTime? @db.Date
  time          DateTime? @db.Time(6)
  room_number   String?   @db.VarChar(10)
  building_name String?   @db.VarChar(255)
}

model availability {
  netid          String   @db.VarChar(255)
  available_date DateTime @db.Date

  @@id([netid, available_date])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model hasra {
  studentnetid     String? @db.VarChar(10)
  studentlastname  String? @db.VarChar(100)
  studentfirstname String? @db.VarChar(100)
  ranetid          String? @db.VarChar(10)
  ralastname       String? @db.VarChar(100)
  rafirstname      String? @db.VarChar(100)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model hasrc {
  ranetid     String? @db.VarChar(10)
  ralastname  String? @db.VarChar(100)
  rafirstname String? @db.VarChar(100)
  rcnetid     String? @db.VarChar(10)
  rclastname  String? @db.VarChar(100)
  rcfirstname String? @db.VarChar(100)

  @@ignore
}

model password {
  netid    String  @id @db.VarChar(10)
  password String? @db.VarChar(25)
}

model report {
  id           Int      @id @default(autoincrement())
  type         String
  urgency      String
  description  String?
  submitted_by String?  @db.VarChar(255)
  is_anonymous Boolean  @default(false)
  location     String?
  issue_type   String?
  equipment    String?
  attachment   String?
  timestamp    DateTime @default(now()) @db.Timestamptz(6)
}

model users {
  netid     String  @id @db.VarChar(10)
  lastname  String? @db.VarChar(100)
  firstname String? @db.VarChar(100)
  year      String? @db.VarChar(10)
  email     String? @db.VarChar(100)
  phone     String? @db.VarChar(20)
  class     String? @db.VarChar(10)
  dorm      String? @db.VarChar(30)
}

model tasks {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  description String?
  availability availability[]
}

model availability {
  id        Int      @id @default(autoincrement())
  netid     String   @db.VarChar(255)
  taskId    Int
  task      tasks    @relation(fields: [taskId], references: [id])
  date      DateTime @db.Date
  startTime DateTime @db.Time(6)
  endTime   DateTime @db.Time(6)

  @@index([netid, taskId])
}
